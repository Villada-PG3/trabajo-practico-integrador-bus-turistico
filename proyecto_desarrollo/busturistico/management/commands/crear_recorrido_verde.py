# busturistico/management/commands/crear_recorrido_verde.py

from django.core.management.base import BaseCommand
from django.utils import timezone
from busturistico.models import (
    Recorrido, Parada, RecorridoParada, Atractivo, 
    ParadaAtractivo, Bus, EstadoBus, EstadoBusHistorial,
    Chofer, EstadoViaje
)
from datetime import time

class Command(BaseCommand):
    help = 'Crear datos iniciales del Recorrido Verde y paradas'

    def handle(self, *args, **options):
        self.stdout.write('Creando datos iniciales...')
        
        # Crear Recorrido Verde
        recorrido_verde, created = Recorrido.objects.get_or_create(
            color_recorrido='VERDE',
            defaults={
                'duracion_aproximada_recorrido': time(8, 50),  # 8h 50min
                'descripcion_recorrido': 'Recorrido que atraviesa los barrios m√°s emblem√°ticos de Buenos Aires, comenzando en el coraz√≥n del Centro Porte√±o con vistas panor√°micas de lugares hist√≥ricos, espacios culturales y barrios √∫nicos.',
            }
        )
        
        if created:
            self.stdout.write(self.style.SUCCESS('‚úì Recorrido Verde creado'))
        else:
            self.stdout.write('‚Ä¢ Recorrido Verde ya exist√≠a')

        # Crear paradas del Recorrido Verde
        paradas_data = [
            {
                'nombre': 'MALBA (Conexi√≥n)',
                'direccion': 'Av. Figueroa Alcorta 3415, Buenos Aires',
                'descripcion': 'Museo de Arte Latinoamericano de Buenos Aires. Punto de conexi√≥n principal del recorrido verde.',
                'latitud': -34.5761,
                'longitud': -58.4019,
                'orden': 1
            },
            {
                'nombre': 'Planetario',
                'direccion': 'Av. Sarmiento s/n, Buenos Aires',
                'descripcion': 'Planetario Galileo Galilei, un √≠cono arquitect√≥nico de la ciudad con espect√°culos astron√≥micos.',
                'latitud': -34.5691,
                'longitud': -58.4115,
                'orden': 2
            },
            {
                'nombre': 'Club de Pescadores',
                'direccion': 'Costanera Norte, Buenos Aires',
                'descripcion': 'Hist√≥rico club ubicado en la Costanera Norte con vista al R√≠o de la Plata.',
                'latitud': -34.5649,
                'longitud': -58.4231,
                'orden': 3
            },
            {
                'nombre': 'Parque de la Reserva',
                'direccion': 'Reserva Ecol√≥gica Costanera Sur, Buenos Aires',
                'descripcion': '√Årea natural protegida con senderos y observaci√≥n de fauna y flora aut√≥ctona.',
                'latitud': -34.6158,
                'longitud': -58.3515,
                'orden': 4
            },
            {
                'nombre': 'El Monumental',
                'direccion': 'Av. Figueroa Alcorta 7597, Buenos Aires',
                'descripcion': 'Estadio Monumental Antonio Vespucio Liberti, casa del Club Atl√©tico River Plate.',
                'latitud': -34.5453,
                'longitud': -58.4498,
                'orden': 5
            },
            {
                'nombre': 'Barrio Chino',
                'direccion': 'Arribe√±os y Mendoza, Belgrano, Buenos Aires',
                'descripci√≥n': 'Sector comercial con caracter√≠sticas de la cultura china, restaurantes y comercios t√≠picos.',
                'latitud': -34.5632,
                'longitud': -58.4526,
                'orden': 6
            },
            {
                'nombre': 'Campo Argentino de Polo',
                'direccion': 'Av. del Libertador y Dorrego, Buenos Aires',
                'descripcion': 'Campo de polo m√°s importante de Argentina, sede del Abierto de Palermo.',
                'latitud': -34.5894,
                'longitud': -58.4165,
                'orden': 7
            },
            {
                'nombre': 'Bosque Alegre (Conexi√≥n)',
                'direccion': 'Av. Infanta Isabel 410, Buenos Aires',
                'descripcion': 'Zona residencial de N√∫√±ez con espacios verdes y conexi√≥n a otros recorridos.',
                'latitud': -34.5432,
                'longitud': -58.4654,
                'orden': 8
            },
            {
                'nombre': 'Distrito Arcos',
                'direccion': 'Av. del Libertador 6090, Buenos Aires',
                'descripcion': 'Complejo arquitect√≥nico y comercial moderno en el coraz√≥n de Palermo.',
                'latitud': -34.5789,
                'longitud': -58.4289,
                'orden': 9
            },
            {
                'nombre': 'Palermo Soho',
                'direccion': 'Armenia 1894, Buenos Aires',
                'descripcion': '¬øSab√©s que escritor y poeta vivi√≥ hasta los 14 a√±os en esta zona? Jorge Luis Borges -popular poeta y escritor argentino- vivi√≥ hasta los 14 a√±os en una casa de la calle Serrano al 2135. En la actualidad, esa casa ya no lleva su nombre. Conoc√© m√°s sobre la vivienda de Borges y otros atractivos de la zona durante el recorrido del Bus.',
                'latitud': -34.5885,
                'longitud': -58.4224,
                'orden': 10
            },
            {
                'nombre': 'Jard√≠n Bot√°nico Carlos Thays (Conexi√≥n)',
                'direccion': 'Av. Santa Fe 3951, Buenos Aires',
                'descripcion': 'Jard√≠n bot√°nico con m√°s de 5000 especies de plantas. Punto de conexi√≥n del recorrido.',
                'latitud': -34.5823,
                'longitud': -58.4139,
                'orden': 11
            }
        ]

        # Crear paradas y asociarlas al recorrido
        for parada_data in paradas_data:
            orden = parada_data.pop('orden')
            
            parada, created = Parada.objects.get_or_create(
                nombre_parada=parada_data['nombre'],
                defaults=parada_data
            )
            
            # Crear relaci√≥n recorrido-parada
            recorrido_parada, created = RecorridoParada.objects.get_or_create(
                recorrido=recorrido_verde,
                parada=parada,
                orden=orden
            )
            
            if created:
                self.stdout.write(f'‚úì Parada "{parada.nombre_parada}" creada y asociada')
            else:
                self.stdout.write(f'‚Ä¢ Parada "{parada.nombre_parada}" ya exist√≠a')

        # Crear atractivos para Palermo Soho
        atractivos_palermo_data = [
            {
                'nombre': 'Plazoleta Julio Cort√°zar (Ex Plaza Serrano)',
                'calificacion': 4,
                'descripcion': 'Tradicional plaza del barrio de Palermo, rodeada de bares, restaurantes y dise√±o.',
                'latitud': -34.5889,
                'longitud': -58.4221
            },
            {
                'nombre': 'Jard√≠n Bot√°nico Carlos Thays',
                'calificacion': 5,
                'descripcion': 'Hermoso jard√≠n bot√°nico con una gran variedad de especies vegetales.',
                'latitud': -34.5823,
                'longitud': -58.4139
            },
            {
                'nombre': 'Plaza Italia',
                'calificacion': 4,
                'descripcion': 'Plaza hist√≥rica con monumento a Giuseppe Garibaldi y feria de artesanos.',
                'latitud': -34.5842,
                'longitud': -58.4208
            },
            {
                'nombre': 'Ecoparque Interactivo',
                'calificacion': 4,
                'descripcion': 'Ex zool√≥gico convertido en ecoparque con fines educativos y de conservaci√≥n.',
                'latitud': -34.5743,
                'longitud': -58.4026
            },
            {
                'nombre': 'Pasajes porte√±os',
                'calificacion': 3,
                'descripcion': 'Pasajes caracter√≠sticos de Buenos Aires con arquitectura t√≠pica del barrio.',
                'latitud': -34.5895,
                'longitud': -58.4235
            }
        ]

        # Crear atractivos y asociarlos a Palermo Soho
        parada_palermo = Parada.objects.get(nombre_parada='Palermo Soho')
        
        for atractivo_data in atractivos_palermo_data:
            atractivo, created = Atractivo.objects.get_or_create(
                nombre_atractivo=atractivo_data['nombre'],
                defaults={
                    'calificacion_estrellas': atractivo_data['calificacion'],
                    'descripcion_atractivo': atractivo_data['descripcion'],
                    'latitud_atractivo': atractivo_data['latitud'],
                    'longitud_atractivo': atractivo_data['longitud']
                }
            )
            
            # Asociar atractivo con parada
            parada_atractivo, created = ParadaAtractivo.objects.get_or_create(
                parada=parada_palermo,
                atractivo=atractivo
            )
            
            if created:
                self.stdout.write(f'‚úì Atractivo "{atractivo.nombre_atractivo}" creado y asociado a Palermo Soho')

        # Crear algunos datos adicionales necesarios
        self.crear_datos_operacionales()
        
        self.stdout.write(
            self.style.SUCCESS(
                '\nüéâ ¬°Datos iniciales creados exitosamente!\n'
                'Ahora puedes ver el Recorrido Verde con sus 11 paradas\n'
                'y los atractivos de Palermo Soho en tu aplicaci√≥n.'
            )
        )

    def crear_datos_operacionales(self):
        """Crear datos m√≠nimos para que el sistema funcione"""
        
        # Estados de bus
        estado_operativo, _ = EstadoBus.objects.get_or_create(
            nombre_estado='Operativo',
            defaults={'descripcion_estado': 'Bus en funcionamiento normal'}
        )
        
        estado_mantenimiento, _ = EstadoBus.objects.get_or_create(
            nombre_estado='En mantenimiento',
            defaults={'descripcion_estado': 'Bus en mantenimiento programado'}
        )
        
        estado_reparacion, _ = EstadoBus.objects.get_or_create(
            nombre_estado='En reparaci√≥n',
            defaults={'descripcion_estado': 'Bus fuera de servicio por reparaci√≥n'}
        )

        # Estados de viaje
        EstadoViaje.objects.get_or_create(
            nombre_estado='Programado',
            defaults={'descripcion_estado': 'Viaje programado pero no iniciado'}
        )
        
        EstadoViaje.objects.get_or_create(
            nombre_estado='En curso',
            defaults={'descripcion_estado': 'Viaje en ejecuci√≥n'}
        )
        
        EstadoViaje.objects.get_or_create(
            nombre_estado='Completado',
            defaults={'descripcion_estado': 'Viaje finalizado exitosamente'}
        )

        # Bus de ejemplo
        bus_ejemplo, created = Bus.objects.get_or_create(
            patente_bus='ABC123',
            defaults={
                'numero_unidad': 1,
                'fecha_compra': timezone.now()
            }
        )
        
        if created:
            # Crear historial de estado para el bus
            EstadoBusHistorial.objects.create(
                patente_bus=bus_ejemplo,
                estado_bus=estado_operativo,
                fecha_inicio_estado=timezone.now()
            )

        # Chofer de ejemplo
        Chofer.objects.get_or_create(
            dni_chofer=12345678,
            defaults={
                'nombre_chofer': 'Carlos',
                'apellido_chofer': 'Rodriguez',
                'legajo_chofer': 'CH001',
                'telefono': '+54 9 11 1234-5678',
                'fecha_ingreso': timezone.now().date(),
                'activo': True
            }
        )

        self.stdout.write('‚úì Datos operacionales b√°sicos creados')